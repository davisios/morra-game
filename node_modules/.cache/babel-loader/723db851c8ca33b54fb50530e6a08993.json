{"ast":null,"code":"import { setDEBUG, truthyEnv } from './shared_impl.mjs';\nimport node_fetch from 'node-fetch';\n\nvar processShim = function () {\n  try {\n    // XXX make better use of process-browserify\n    if (Object.keys(process.env).length === 0) {\n      throw Error(\"nothing in process.env\");\n    }\n\n    return process;\n  } catch (e) {\n    // ReferenceError\n    return {\n      _reachShim: true,\n      env: {\n        // XXX: figure out how to handle this stuff better\n        REACH_CONNECTOR_MODE: 'ETH-browser'\n      },\n      stdout: {\n        write: function () {}\n      },\n      argv: [],\n      exit: function (ec) {\n        console.warn(\"Ignoring attempt to exit with code\", ec);\n      }\n    };\n  }\n}();\n\nexport var updateProcessEnv = function (x) {\n  var env = processShim.env;\n\n  for (var k in x) {\n    var kp = k.replace(/^REACT_APP_/, \"\");\n    env[kp] = x[k];\n  }\n\n  setDEBUG(truthyEnv(env['REACH_DEBUG']));\n};\n\nvar windowShim = function () {\n  try {\n    // @ts-ignore\n    return window;\n  } catch (e) {\n    // ReferenceError\n    return {\n      _reachShim: true,\n      fetch: node_fetch\n    };\n  }\n}();\n\nexport { processShim as process, windowShim as window };","map":{"version":3,"names":["setDEBUG","truthyEnv","node_fetch","processShim","Object","keys","process","env","length","Error","e","_reachShim","REACH_CONNECTOR_MODE","stdout","write","argv","exit","ec","console","warn","updateProcessEnv","x","k","kp","replace","windowShim","window","fetch"],"sources":["/Users/david/reach/morra/morraUI/node_modules/@reach-sh/stdlib/shim.mjs"],"sourcesContent":["import { setDEBUG, truthyEnv, } from './shared_impl.mjs';\nimport node_fetch from 'node-fetch';\nvar processShim = (function() {\n  try {\n    // XXX make better use of process-browserify\n    if (Object.keys(process.env).length === 0) {\n      throw Error(\"nothing in process.env\");\n    }\n    return process;\n  } catch (e) {\n    // ReferenceError\n    return {\n      _reachShim: true,\n      env: {\n        // XXX: figure out how to handle this stuff better\n        REACH_CONNECTOR_MODE: 'ETH-browser'\n      },\n      stdout: {\n        write: function() {}\n      },\n      argv: [],\n      exit: function(ec) {\n        console.warn(\"Ignoring attempt to exit with code\", ec);\n      }\n    };\n  }\n})();\nexport var updateProcessEnv = function(x) {\n  var env = processShim.env;\n  for (var k in x) {\n    var kp = k.replace(/^REACT_APP_/, \"\");\n    env[kp] = x[k];\n  }\n  setDEBUG(truthyEnv(env['REACH_DEBUG']));\n};\nvar windowShim = (function() {\n  try {\n    // @ts-ignore\n    return window;\n  } catch (e) {\n    // ReferenceError\n    return {\n      _reachShim: true,\n      fetch: node_fetch\n    };\n  }\n})();\nexport { processShim as process, windowShim as window, };\n//# sourceMappingURL=shim.js.map\n"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAqC,mBAArC;AACA,OAAOC,UAAP,MAAuB,YAAvB;;AACA,IAAIC,WAAW,GAAI,YAAW;EAC5B,IAAI;IACF;IACA,IAAIC,MAAM,CAACC,IAAP,CAAYC,OAAO,CAACC,GAApB,EAAyBC,MAAzB,KAAoC,CAAxC,EAA2C;MACzC,MAAMC,KAAK,CAAC,wBAAD,CAAX;IACD;;IACD,OAAOH,OAAP;EACD,CAND,CAME,OAAOI,CAAP,EAAU;IACV;IACA,OAAO;MACLC,UAAU,EAAE,IADP;MAELJ,GAAG,EAAE;QACH;QACAK,oBAAoB,EAAE;MAFnB,CAFA;MAMLC,MAAM,EAAE;QACNC,KAAK,EAAE,YAAW,CAAE;MADd,CANH;MASLC,IAAI,EAAE,EATD;MAULC,IAAI,EAAE,UAASC,EAAT,EAAa;QACjBC,OAAO,CAACC,IAAR,CAAa,oCAAb,EAAmDF,EAAnD;MACD;IAZI,CAAP;EAcD;AACF,CAxBiB,EAAlB;;AAyBA,OAAO,IAAIG,gBAAgB,GAAG,UAASC,CAAT,EAAY;EACxC,IAAId,GAAG,GAAGJ,WAAW,CAACI,GAAtB;;EACA,KAAK,IAAIe,CAAT,IAAcD,CAAd,EAAiB;IACf,IAAIE,EAAE,GAAGD,CAAC,CAACE,OAAF,CAAU,aAAV,EAAyB,EAAzB,CAAT;IACAjB,GAAG,CAACgB,EAAD,CAAH,GAAUF,CAAC,CAACC,CAAD,CAAX;EACD;;EACDtB,QAAQ,CAACC,SAAS,CAACM,GAAG,CAAC,aAAD,CAAJ,CAAV,CAAR;AACD,CAPM;;AAQP,IAAIkB,UAAU,GAAI,YAAW;EAC3B,IAAI;IACF;IACA,OAAOC,MAAP;EACD,CAHD,CAGE,OAAOhB,CAAP,EAAU;IACV;IACA,OAAO;MACLC,UAAU,EAAE,IADP;MAELgB,KAAK,EAAEzB;IAFF,CAAP;EAID;AACF,CAXgB,EAAjB;;AAYA,SAASC,WAAW,IAAIG,OAAxB,EAAiCmB,UAAU,IAAIC,MAA/C"},"metadata":{},"sourceType":"module"}