{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport * as shared_backend from './shared_backend.mjs';\nimport { debug, labelMaps, makeDigest, mkAddressEq, makeArith, UInt256_max } from './shared_impl.mjs';\nimport { bigNumberToNumber, bigNumberify, bigNumberToBigInt } from './shared_user.mjs';\nimport algosdk from 'algosdk';\nimport buffer from 'buffer';\nimport ethers from 'ethers';\nimport * as CBR from './CBR.mjs';\nvar BigNumber = ethers.BigNumber;\nvar Buffer = buffer.Buffer;\nexport var UInt_max = BigNumber.from(2).pow(64).sub(1);\n;\nexport var digest = makeDigest('sha256', function (t, v) {\n  return t.toNet(v);\n});\nexport var T_Null = __assign(__assign({}, CBR.BT_Null), {\n  netSize: 0,\n  toNet: function (bv) {\n    return void bv, new Uint8Array([]);\n  },\n  fromNet: function (nv) {\n    return void nv, null;\n  },\n  netName: 'byte[0]'\n});\nexport var T_Bool = __assign(__assign({}, CBR.BT_Bool), {\n  netSize: 1,\n  toNet: function (bv) {\n    return new Uint8Array([bv ? 1 : 0]);\n  },\n  fromNet: function (nv) {\n    return nv[0] == 1;\n  },\n  netName: 'byte'\n});\nexport var T_UInt = __assign(__assign({}, CBR.BT_UInt(UInt_max)), {\n  netSize: 8,\n  toNet: function (bv) {\n    try {\n      return ethers.utils.zeroPad(ethers.utils.arrayify(bv), 8);\n    } catch (e) {\n      throw new Error(\"toNet: \".concat(bv, \" is out of range [0, \").concat(UInt_max, \"]\"));\n    }\n  },\n  fromNet: function (nv) {\n    // debug(`fromNet: UInt`, nv);\n    // if (getDEBUG()) console.log(nv);\n    return ethers.BigNumber.from(nv.slice(0, 8));\n  },\n  netName: 'uint64'\n});\nexport var T_UInt256 = __assign(__assign({}, CBR.BT_UInt(UInt256_max)), {\n  netSize: 32,\n  toNet: function (bv) {\n    try {\n      return ethers.utils.zeroPad(ethers.utils.arrayify(bv), 32);\n    } catch (e) {\n      throw new Error(\"toNet: \".concat(bv, \" is out of range [0, \").concat(UInt256_max, \"]\"));\n    }\n  },\n  fromNet: function (nv) {\n    // debug(`fromNet: UInt`, nv);\n    // if (getDEBUG()) console.log(nv);\n    return ethers.BigNumber.from(nv.slice(0, 32));\n  },\n  netName: 'uint256'\n});\n/** @description For arbitrary utf8 strings */\n\nvar stringyNet = function (len) {\n  return {\n    toNet: function (bv) {\n      return ethers.utils.toUtf8Bytes(bv);\n    },\n    fromNet: function (nv) {\n      return ethers.utils.toUtf8String(nv.slice(0, len));\n    }\n  };\n};\n/** @description For hex strings representing bytes */\n\n\nexport var bytestringyNet = function (len) {\n  return {\n    netSize: len,\n    netName: \"byte[\".concat(len, \"]\"),\n    toNet: function (bv) {\n      return ethers.utils.arrayify(bv);\n    },\n    fromNet: function (nv) {\n      return ethers.utils.hexlify(nv.slice(0, len));\n    }\n  };\n};\nexport var T_Bytes = function (len) {\n  return __assign(__assign(__assign({}, CBR.BT_Bytes(len)), stringyNet(len)), {\n    netSize: bigNumberToNumber(len),\n    netName: \"byte[\".concat(len, \"]\")\n  });\n};\nexport var T_Digest = __assign(__assign(__assign({}, CBR.BT_Digest), bytestringyNet(32)), {\n  netName: \"digest\"\n});\nexport var addressToHex = function (x) {\n  return '0x' + Buffer.from(algosdk.decodeAddress(x).publicKey).toString('hex');\n};\nexport var addressFromHex = function (hexAddr) {\n  return algosdk.encodeAddress(Buffer.from(hexAddr.slice(2), 'hex'));\n};\n\nvar extractAddrM = function (x) {\n  var addr = x && x.networkAccount && x.networkAccount.addr || x && x.addr || typeof x === 'string' && x; //debug(`extractAddrM`, {x, addr});\n\n  return addr;\n};\n\nexport var extractAddr = function (x) {\n  var a = extractAddrM(x); //debug(`extractAddr`, {x, a});\n\n  if (a === false) {\n    throw Error(\"Expected address, got \".concat(x));\n  }\n\n  return a;\n};\n\nfunction addressUnwrapper(x) {\n  var addr = extractAddrM(x);\n  return !addr ? x : addr.slice(0, 2) === '0x' ? addr : addressToHex(addr);\n}\n\n;\nexport var T_Address = __assign(__assign(__assign({}, CBR.BT_Address), bytestringyNet(32)), {\n  netSize: 32,\n  canonicalize: function (uv) {\n    var val = addressUnwrapper(uv);\n    var hs = CBR.BT_Address.canonicalize(val || uv); // We are filling up with zeros if the address is less than 32 bytes\n\n    return hs.padEnd(32 * 2 + 2, '0');\n  },\n  netName: \"address\"\n});\nexport var T_Contract = __assign(__assign({}, T_UInt), {\n  name: 'Contract'\n});\nexport var T_Array = function (co, size_u) {\n  var size = bigNumberToNumber(bigNumberify(size_u));\n  debug('T_Array', co, size);\n  var asTuple = T_Tuple(new Array(size).fill(co));\n  debug('T_Array', asTuple);\n  var netSize = asTuple.netSize,\n      toNet = asTuple.toNet,\n      fromNet = asTuple.fromNet;\n  return __assign(__assign({}, CBR.BT_Array(co, size)), {\n    netSize: netSize,\n    toNet: toNet,\n    fromNet: fromNet,\n    netName: \"\".concat(co.netName, \"[\").concat(size, \"]\")\n  });\n};\nexport var T_Tuple = function (cos) {\n  return __assign(__assign({}, CBR.BT_Tuple(cos)), {\n    netSize: cos.reduce(function (acc, co) {\n      return acc + co.netSize;\n    }, 0),\n    toNet: function (bv) {\n      var val = cos.map(function (co, i) {\n        return co.toNet(bv[i]);\n      });\n      return ethers.utils.concat(val);\n    },\n    // TODO: share more code w/ T_Array.fromNet\n    fromNet: function (nv) {\n      //debug(`Tuple.fromNet`, cos.map((x) => x.name), nv);\n      var chunks = new Array(cos.length).fill(null);\n      var rest = nv;\n\n      for (var i in cos) {\n        var co = cos[i];\n        chunks[i] = co.fromNet(rest.slice(0, co.netSize));\n        rest = rest.slice(co.netSize);\n      }\n\n      return chunks;\n    },\n    netName: \"(\".concat(cos.map(function (c) {\n      return c.netName;\n    }).join(','), \")\")\n  });\n};\nexport var T_Struct = function (cos) {\n  return __assign(__assign({}, CBR.BT_Struct(cos)), {\n    netSize: cos.reduce(function (acc, co) {\n      return acc + co[1].netSize;\n    }, 0),\n    toNet: function (bv) {\n      var val = cos.map(function (_a) {\n        var _b = __read(_a, 2),\n            k = _b[0],\n            co = _b[1];\n\n        return co.toNet(bv[k]);\n      });\n      return ethers.utils.concat(val);\n    },\n    // TODO: share more code w/ T_Array.fromNet\n    fromNet: function (nv) {\n      var obj = {};\n      var rest = nv;\n\n      for (var i in cos) {\n        var _a = __read(cos[i], 2),\n            k = _a[0],\n            co = _a[1];\n\n        obj[k] = co.fromNet(rest.slice(0, co.netSize));\n        rest = rest.slice(co.netSize);\n      }\n\n      return obj;\n    },\n    netName: \"(\".concat(cos.map(function (c) {\n      return c[1].netName;\n    }).join(','), \")\")\n  });\n};\nexport var T_Object = function (coMap) {\n  var cos = Object.values(coMap);\n  var netSize = cos.reduce(function (acc, co) {\n    return acc + co.netSize;\n  }, 0);\n  var ascLabels = labelMaps(coMap).ascLabels;\n  return __assign(__assign({}, CBR.BT_Object(coMap)), {\n    netSize: netSize,\n    toNet: function (bv) {\n      var chunks = ascLabels.map(function (label) {\n        return coMap[label].toNet(bv[label]);\n      });\n      return ethers.utils.concat(chunks);\n    },\n    // TODO: share more code w/ T_Array.fromNet and T_Tuple.fromNet\n    fromNet: function (nv) {\n      var obj = {};\n      var rest = nv;\n\n      for (var iStr in ascLabels) {\n        var i = parseInt(iStr);\n        var label = ascLabels[i];\n        var co = coMap[label];\n        obj[label] = co.fromNet(rest.slice(0, co.netSize));\n        rest = rest.slice(co.netSize);\n      }\n\n      return obj;\n    },\n    netName: \"(\".concat(cos.map(function (c) {\n      return c.netName;\n    }).join(','), \")\")\n  });\n}; // 1 byte for the label\n// the rest right-padded with zeroes\n// up to the size of the largest variant\n\nexport var T_Data = function (coMap) {\n  var cos = Object.values(coMap);\n  var cosSizes = cos.map(function (co) {\n    return co.netSize;\n  });\n  var valSize = Math.max.apply(Math, __spreadArray([], __read(cosSizes), false));\n  var netSize = valSize + 1;\n  debug(\"T_Data\", {\n    cos: cos,\n    cosSizes: cosSizes,\n    valSize: valSize,\n    netSize: netSize\n  });\n\n  var _a = labelMaps(coMap),\n      ascLabels = _a.ascLabels,\n      labelMap = _a.labelMap;\n\n  return __assign(__assign({}, CBR.BT_Data(coMap)), {\n    netSize: netSize,\n    toNet: function (_a) {\n      var _b = __read(_a, 2),\n          label = _b[0],\n          val = _b[1];\n\n      var i = labelMap[label];\n      var lab_nv = new Uint8Array([i]);\n      var val_co = coMap[label];\n      var val_nv = val_co.toNet(val);\n      var padding = new Uint8Array(valSize - val_nv.length);\n      return ethers.utils.concat([lab_nv, val_nv, padding]);\n    },\n    fromNet: function (nv) {\n      var i = nv[0];\n      var label = ascLabels[i];\n      var val_co = coMap[label];\n      debug({\n        nv: nv,\n        i: i,\n        label: label,\n        val_co: val_co\n      });\n      var rest = nv.slice(1);\n      var sliceTo = val_co.netSize;\n      var val = val_co.fromNet(rest.slice(0, sliceTo));\n      return [label, val];\n    },\n    netName: \"(byte,byte[\".concat(valSize, \"])\")\n  });\n};\nexport var addressEq = mkAddressEq(T_Address);\nexport var digestEq = shared_backend.bytesEq;\nexport var digest_xor = shared_backend.digest_xor;\nexport var bytes_xor = shared_backend.bytes_xor;\nexport var btoiLast8 = shared_backend.btoiLast8;\nvar T_Token = T_UInt;\nexport var ctcAddrEq = function (x, y) {\n  debug('ctcAddrEq', {\n    x: x,\n    y: y\n  });\n  var ctc_x = T_Contract.canonicalize(x);\n  var addr_y = T_Address.canonicalize(y);\n  var addr_x = algosdk.getApplicationAddress(bigNumberToBigInt(ctc_x));\n  debug('ctcAddrEq', {\n    addr_x: addr_x,\n    addr_y: addr_y\n  });\n  return addressEq(addr_x, addr_y);\n};\nexport var tokenEq = function (x, y) {\n  return T_Token.canonicalize(x).eq(T_Token.canonicalize(y));\n};\nexport var typeDefs = {\n  T_Null: T_Null,\n  T_Bool: T_Bool,\n  T_UInt: T_UInt,\n  T_UInt256: T_UInt256,\n  T_Bytes: T_Bytes,\n  T_Address: T_Address,\n  T_Contract: T_Contract,\n  T_Digest: T_Digest,\n  T_Token: T_Token,\n  T_Object: T_Object,\n  T_Data: T_Data,\n  T_Array: T_Array,\n  T_Tuple: T_Tuple,\n  T_Struct: T_Struct\n};\nexport var emptyContractInfo = 0;\nvar arith = makeArith(UInt_max);\nexport var stdlib = __assign(__assign(__assign(__assign({}, shared_backend), arith), typeDefs), {\n  addressEq: addressEq,\n  ctcAddrEq: ctcAddrEq,\n  digestEq: digestEq,\n  tokenEq: tokenEq,\n  digest: digest,\n  UInt_max: UInt_max,\n  emptyContractInfo: emptyContractInfo\n});","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__read","o","m","Symbol","iterator","r","ar","e","next","done","push","value","error","__spreadArray","to","from","pack","l","Array","slice","concat","shared_backend","debug","labelMaps","makeDigest","mkAddressEq","makeArith","UInt256_max","bigNumberToNumber","bigNumberify","bigNumberToBigInt","algosdk","buffer","ethers","CBR","BigNumber","Buffer","UInt_max","pow","sub","digest","v","toNet","T_Null","BT_Null","netSize","bv","Uint8Array","fromNet","nv","netName","T_Bool","BT_Bool","T_UInt","BT_UInt","utils","zeroPad","arrayify","Error","T_UInt256","stringyNet","len","toUtf8Bytes","toUtf8String","bytestringyNet","hexlify","T_Bytes","BT_Bytes","T_Digest","BT_Digest","addressToHex","x","decodeAddress","publicKey","toString","addressFromHex","hexAddr","encodeAddress","extractAddrM","addr","networkAccount","extractAddr","a","addressUnwrapper","T_Address","BT_Address","canonicalize","uv","val","hs","padEnd","T_Contract","name","T_Array","co","size_u","size","asTuple","T_Tuple","fill","BT_Array","cos","BT_Tuple","reduce","acc","map","chunks","rest","c","join","T_Struct","BT_Struct","_a","_b","k","obj","T_Object","coMap","values","ascLabels","BT_Object","label","iStr","parseInt","T_Data","cosSizes","valSize","Math","max","labelMap","BT_Data","lab_nv","val_co","val_nv","padding","sliceTo","addressEq","digestEq","bytesEq","digest_xor","bytes_xor","btoiLast8","T_Token","ctcAddrEq","y","ctc_x","addr_y","addr_x","getApplicationAddress","tokenEq","eq","typeDefs","emptyContractInfo","arith","stdlib"],"sources":["/Users/david/reach/morra/morraUI/node_modules/@reach-sh/stdlib/ALGO_compiled.mjs"],"sourcesContent":["var __assign = (this && this.__assign) || function() {\n  __assign = Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s)\n        if (Object.prototype.hasOwnProperty.call(s, p))\n          t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r, ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) { e = { error: error }; } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally { if (e) throw e.error; }\n  }\n  return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function(to, from, pack) {\n  if (pack || arguments.length === 2)\n    for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n        if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n        ar[i] = from[i];\n      }\n    }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport * as shared_backend from './shared_backend.mjs';\nimport { debug, labelMaps, makeDigest, mkAddressEq, makeArith, UInt256_max, } from './shared_impl.mjs';\nimport { bigNumberToNumber, bigNumberify, bigNumberToBigInt, } from './shared_user.mjs';\nimport algosdk from 'algosdk';\nimport buffer from 'buffer';\nimport ethers from 'ethers';\nimport * as CBR from './CBR.mjs';\nvar BigNumber = ethers.BigNumber;\nvar Buffer = buffer.Buffer;\nexport var UInt_max = BigNumber.from(2).pow(64).sub(1);;\nexport var digest = makeDigest('sha256', function(t, v) { return t.toNet(v); });\nexport var T_Null = __assign(__assign({}, CBR.BT_Null), { netSize: 0, toNet: function(bv) { return (void(bv), new Uint8Array([])); }, fromNet: function(nv) { return (void(nv), null); }, netName: 'byte[0]' });\nexport var T_Bool = __assign(__assign({}, CBR.BT_Bool), { netSize: 1, toNet: function(bv) { return new Uint8Array([bv ? 1 : 0]); }, fromNet: function(nv) { return nv[0] == 1; }, netName: 'byte' });\nexport var T_UInt = __assign(__assign({}, CBR.BT_UInt(UInt_max)), {\n  netSize: 8,\n  toNet: function(bv) {\n    try {\n      return ethers.utils.zeroPad(ethers.utils.arrayify(bv), 8);\n    } catch (e) {\n      throw new Error(\"toNet: \".concat(bv, \" is out of range [0, \").concat(UInt_max, \"]\"));\n    }\n  },\n  fromNet: function(nv) {\n    // debug(`fromNet: UInt`, nv);\n    // if (getDEBUG()) console.log(nv);\n    return ethers.BigNumber.from(nv.slice(0, 8));\n  },\n  netName: 'uint64'\n});\nexport var T_UInt256 = __assign(__assign({}, CBR.BT_UInt(UInt256_max)), {\n  netSize: 32,\n  toNet: function(bv) {\n    try {\n      return ethers.utils.zeroPad(ethers.utils.arrayify(bv), 32);\n    } catch (e) {\n      throw new Error(\"toNet: \".concat(bv, \" is out of range [0, \").concat(UInt256_max, \"]\"));\n    }\n  },\n  fromNet: function(nv) {\n    // debug(`fromNet: UInt`, nv);\n    // if (getDEBUG()) console.log(nv);\n    return ethers.BigNumber.from(nv.slice(0, 32));\n  },\n  netName: 'uint256'\n});\n/** @description For arbitrary utf8 strings */\nvar stringyNet = function(len) {\n  return ({\n    toNet: function(bv) { return (ethers.utils.toUtf8Bytes(bv)); },\n    fromNet: function(nv) { return (ethers.utils.toUtf8String(nv.slice(0, len))); }\n  });\n};\n/** @description For hex strings representing bytes */\nexport var bytestringyNet = function(len) {\n  return ({\n    netSize: len,\n    netName: \"byte[\".concat(len, \"]\"),\n    toNet: function(bv) {\n      return ethers.utils.arrayify(bv);\n    },\n    fromNet: function(nv) {\n      return ethers.utils.hexlify(nv.slice(0, len));\n    }\n  });\n};\nexport var T_Bytes = function(len) { return (__assign(__assign(__assign({}, CBR.BT_Bytes(len)), stringyNet(len)), { netSize: bigNumberToNumber(len), netName: \"byte[\".concat(len, \"]\") })); };\nexport var T_Digest = __assign(__assign(__assign({}, CBR.BT_Digest), bytestringyNet(32)), { netName: \"digest\" });\nexport var addressToHex = function(x) {\n  return '0x' + Buffer.from(algosdk.decodeAddress(x).publicKey).toString('hex');\n};\nexport var addressFromHex = function(hexAddr) {\n  return algosdk.encodeAddress(Buffer.from(hexAddr.slice(2), 'hex'));\n};\nvar extractAddrM = function(x) {\n  var addr = (x && x.networkAccount && x.networkAccount.addr) ||\n    (x && x.addr) ||\n    (typeof x === 'string' && x);\n  //debug(`extractAddrM`, {x, addr});\n  return addr;\n};\nexport var extractAddr = function(x) {\n  var a = extractAddrM(x);\n  //debug(`extractAddr`, {x, a});\n  if (a === false) {\n    throw Error(\"Expected address, got \".concat(x));\n  }\n  return a;\n};\n\nfunction addressUnwrapper(x) {\n  var addr = extractAddrM(x);\n  return !addr ? x :\n    addr.slice(0, 2) === '0x' ? addr :\n    addressToHex(addr);\n};\nexport var T_Address = __assign(__assign(__assign({}, CBR.BT_Address), bytestringyNet(32)), {\n  netSize: 32,\n  canonicalize: function(uv) {\n    var val = addressUnwrapper(uv);\n    var hs = CBR.BT_Address.canonicalize(val || uv);\n    // We are filling up with zeros if the address is less than 32 bytes\n    return hs.padEnd(32 * 2 + 2, '0');\n  },\n  netName: \"address\"\n});\nexport var T_Contract = __assign(__assign({}, T_UInt), { name: 'Contract' });\nexport var T_Array = function(co, size_u) {\n  var size = bigNumberToNumber(bigNumberify(size_u));\n  debug('T_Array', co, size);\n  var asTuple = T_Tuple(new Array(size).fill(co));\n  debug('T_Array', asTuple);\n  var netSize = asTuple.netSize,\n    toNet = asTuple.toNet,\n    fromNet = asTuple.fromNet;\n  return __assign(__assign({}, CBR.BT_Array(co, size)), { netSize: netSize, toNet: toNet, fromNet: fromNet, netName: \"\".concat(co.netName, \"[\").concat(size, \"]\") });\n};\nexport var T_Tuple = function(cos) {\n  return (__assign(__assign({}, CBR.BT_Tuple(cos)), {\n    netSize: (cos.reduce((function(acc, co) {\n      return acc + co.netSize;\n    }), 0)),\n    toNet: function(bv) {\n      var val = cos.map(function(co, i) { return co.toNet(bv[i]); });\n      return ethers.utils.concat(val);\n    },\n    // TODO: share more code w/ T_Array.fromNet\n    fromNet: function(nv) {\n      //debug(`Tuple.fromNet`, cos.map((x) => x.name), nv);\n      var chunks = new Array(cos.length).fill(null);\n      var rest = nv;\n      for (var i in cos) {\n        var co = cos[i];\n        chunks[i] = co.fromNet(rest.slice(0, co.netSize));\n        rest = rest.slice(co.netSize);\n      }\n      return chunks;\n    },\n    netName: \"(\".concat(cos.map(function(c) { return c.netName; }).join(','), \")\")\n  }));\n};\nexport var T_Struct = function(cos) {\n  return (__assign(__assign({}, CBR.BT_Struct(cos)), {\n    netSize: (cos.reduce(function(acc, co) { return acc + co[1].netSize; }, 0)),\n    toNet: function(bv) {\n      var val = cos.map(function(_a) {\n        var _b = __read(_a, 2),\n          k = _b[0],\n          co = _b[1];\n        return co.toNet(bv[k]);\n      });\n      return ethers.utils.concat(val);\n    },\n    // TODO: share more code w/ T_Array.fromNet\n    fromNet: function(nv) {\n      var obj = {};\n      var rest = nv;\n      for (var i in cos) {\n        var _a = __read(cos[i], 2),\n          k = _a[0],\n          co = _a[1];\n        obj[k] = co.fromNet(rest.slice(0, co.netSize));\n        rest = rest.slice(co.netSize);\n      }\n      return obj;\n    },\n    netName: \"(\".concat(cos.map(function(c) { return c[1].netName; }).join(','), \")\")\n  }));\n};\nexport var T_Object = function(coMap) {\n  var cos = Object.values(coMap);\n  var netSize = cos.reduce(function(acc, co) { return acc + co.netSize; }, 0);\n  var ascLabels = labelMaps(coMap).ascLabels;\n  return __assign(__assign({}, CBR.BT_Object(coMap)), {\n    netSize: netSize,\n    toNet: function(bv) {\n      var chunks = ascLabels.map(function(label) {\n        return coMap[label].toNet(bv[label]);\n      });\n      return ethers.utils.concat(chunks);\n    },\n    // TODO: share more code w/ T_Array.fromNet and T_Tuple.fromNet\n    fromNet: function(nv) {\n      var obj = {};\n      var rest = nv;\n      for (var iStr in ascLabels) {\n        var i = parseInt(iStr);\n        var label = ascLabels[i];\n        var co = coMap[label];\n        obj[label] = co.fromNet(rest.slice(0, co.netSize));\n        rest = rest.slice(co.netSize);\n      }\n      return obj;\n    },\n    netName: \"(\".concat(cos.map(function(c) { return c.netName; }).join(','), \")\")\n  });\n};\n// 1 byte for the label\n// the rest right-padded with zeroes\n// up to the size of the largest variant\nexport var T_Data = function(coMap) {\n  var cos = Object.values(coMap);\n  var cosSizes = cos.map(function(co) { return co.netSize; });\n  var valSize = Math.max.apply(Math, __spreadArray([], __read(cosSizes), false));\n  var netSize = valSize + 1;\n  debug(\"T_Data\", { cos: cos, cosSizes: cosSizes, valSize: valSize, netSize: netSize });\n  var _a = labelMaps(coMap),\n    ascLabels = _a.ascLabels,\n    labelMap = _a.labelMap;\n  return __assign(__assign({}, CBR.BT_Data(coMap)), {\n    netSize: netSize,\n    toNet: function(_a) {\n      var _b = __read(_a, 2),\n        label = _b[0],\n        val = _b[1];\n      var i = labelMap[label];\n      var lab_nv = new Uint8Array([i]);\n      var val_co = coMap[label];\n      var val_nv = val_co.toNet(val);\n      var padding = new Uint8Array(valSize - val_nv.length);\n      return ethers.utils.concat([lab_nv, val_nv, padding]);\n    },\n    fromNet: function(nv) {\n      var i = nv[0];\n      var label = ascLabels[i];\n      var val_co = coMap[label];\n      debug({ nv: nv, i: i, label: label, val_co: val_co });\n      var rest = nv.slice(1);\n      var sliceTo = val_co.netSize;\n      var val = val_co.fromNet(rest.slice(0, sliceTo));\n      return [label, val];\n    },\n    netName: \"(byte,byte[\".concat(valSize, \"])\")\n  });\n};\nexport var addressEq = mkAddressEq(T_Address);\nexport var digestEq = shared_backend.bytesEq;\nexport var digest_xor = shared_backend.digest_xor;\nexport var bytes_xor = shared_backend.bytes_xor;\nexport var btoiLast8 = shared_backend.btoiLast8;\nvar T_Token = T_UInt;\nexport var ctcAddrEq = function(x, y) {\n  debug('ctcAddrEq', { x: x, y: y });\n  var ctc_x = T_Contract.canonicalize(x);\n  var addr_y = T_Address.canonicalize(y);\n  var addr_x = algosdk.getApplicationAddress(bigNumberToBigInt(ctc_x));\n  debug('ctcAddrEq', { addr_x: addr_x, addr_y: addr_y });\n  return addressEq(addr_x, addr_y);\n};\nexport var tokenEq = function(x, y) {\n  return T_Token.canonicalize(x).eq(T_Token.canonicalize(y));\n};\nexport var typeDefs = {\n  T_Null: T_Null,\n  T_Bool: T_Bool,\n  T_UInt: T_UInt,\n  T_UInt256: T_UInt256,\n  T_Bytes: T_Bytes,\n  T_Address: T_Address,\n  T_Contract: T_Contract,\n  T_Digest: T_Digest,\n  T_Token: T_Token,\n  T_Object: T_Object,\n  T_Data: T_Data,\n  T_Array: T_Array,\n  T_Tuple: T_Tuple,\n  T_Struct: T_Struct\n};\nexport var emptyContractInfo = 0;\nvar arith = makeArith(UInt_max);\nexport var stdlib = __assign(__assign(__assign(__assign({}, shared_backend), arith), typeDefs), { addressEq: addressEq, ctcAddrEq: ctcAddrEq, digestEq: digestEq, tokenEq: tokenEq, digest: digest, UInt_max: UInt_max, emptyContractInfo: emptyContractInfo });\n//# sourceMappingURL=ALGO_compiled.js.map\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAW;EACnDA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;IACtC,KAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;MACnDD,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;MACA,KAAK,IAAII,CAAT,IAAcL,CAAd,EACE,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACEN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;IACL;;IACD,OAAON,CAAP;EACD,CARD;;EASA,OAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACD,CAXD;;AAYA,IAAIO,MAAM,GAAI,QAAQ,KAAKA,MAAd,IAAyB,UAASC,CAAT,EAAYT,CAAZ,EAAe;EACnD,IAAIU,CAAC,GAAG,OAAOC,MAAP,KAAkB,UAAlB,IAAgCF,CAAC,CAACE,MAAM,CAACC,QAAR,CAAzC;EACA,IAAI,CAACF,CAAL,EAAQ,OAAOD,CAAP;EACR,IAAIV,CAAC,GAAGW,CAAC,CAACJ,IAAF,CAAOG,CAAP,CAAR;EAAA,IACEI,CADF;EAAA,IACKC,EAAE,GAAG,EADV;EAAA,IAEEC,CAFF;;EAGA,IAAI;IACF,OAAO,CAACf,CAAC,KAAK,KAAK,CAAX,IAAgBA,CAAC,KAAK,CAAvB,KAA6B,CAAC,CAACa,CAAC,GAAGd,CAAC,CAACiB,IAAF,EAAL,EAAeC,IAApD,EAA0DH,EAAE,CAACI,IAAH,CAAQL,CAAC,CAACM,KAAV;EAC3D,CAFD,CAEE,OAAOC,KAAP,EAAc;IAAEL,CAAC,GAAG;MAAEK,KAAK,EAAEA;IAAT,CAAJ;EAAuB,CAFzC,SAEkD;IAChD,IAAI;MACF,IAAIP,CAAC,IAAI,CAACA,CAAC,CAACI,IAAR,KAAiBP,CAAC,GAAGX,CAAC,CAAC,QAAD,CAAtB,CAAJ,EAAuCW,CAAC,CAACJ,IAAF,CAAOP,CAAP;IACxC,CAFD,SAEU;MAAE,IAAIgB,CAAJ,EAAO,MAAMA,CAAC,CAACK,KAAR;IAAgB;EACpC;;EACD,OAAON,EAAP;AACD,CAdD;;AAeA,IAAIO,aAAa,GAAI,QAAQ,KAAKA,aAAd,IAAgC,UAASC,EAAT,EAAaC,IAAb,EAAmBC,IAAnB,EAAyB;EAC3E,IAAIA,IAAI,IAAIvB,SAAS,CAACC,MAAV,KAAqB,CAAjC,EACE,KAAK,IAAIH,CAAC,GAAG,CAAR,EAAW0B,CAAC,GAAGF,IAAI,CAACrB,MAApB,EAA4BY,EAAjC,EAAqCf,CAAC,GAAG0B,CAAzC,EAA4C1B,CAAC,EAA7C,EAAiD;IAC/C,IAAIe,EAAE,IAAI,EAAEf,CAAC,IAAIwB,IAAP,CAAV,EAAwB;MACtB,IAAI,CAACT,EAAL,EAASA,EAAE,GAAGY,KAAK,CAACtB,SAAN,CAAgBuB,KAAhB,CAAsBrB,IAAtB,CAA2BiB,IAA3B,EAAiC,CAAjC,EAAoCxB,CAApC,CAAL;MACTe,EAAE,CAACf,CAAD,CAAF,GAAQwB,IAAI,CAACxB,CAAD,CAAZ;IACD;EACF;EACH,OAAOuB,EAAE,CAACM,MAAH,CAAUd,EAAE,IAAIY,KAAK,CAACtB,SAAN,CAAgBuB,KAAhB,CAAsBrB,IAAtB,CAA2BiB,IAA3B,CAAhB,CAAP;AACD,CATD;;AAUA,OAAO,KAAKM,cAAZ,MAAgC,sBAAhC;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,UAA3B,EAAuCC,WAAvC,EAAoDC,SAApD,EAA+DC,WAA/D,QAAmF,mBAAnF;AACA,SAASC,iBAAT,EAA4BC,YAA5B,EAA0CC,iBAA1C,QAAoE,mBAApE;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAO,KAAKC,GAAZ,MAAqB,WAArB;AACA,IAAIC,SAAS,GAAGF,MAAM,CAACE,SAAvB;AACA,IAAIC,MAAM,GAAGJ,MAAM,CAACI,MAApB;AACA,OAAO,IAAIC,QAAQ,GAAGF,SAAS,CAACpB,IAAV,CAAe,CAAf,EAAkBuB,GAAlB,CAAsB,EAAtB,EAA0BC,GAA1B,CAA8B,CAA9B,CAAf;AAAgD;AACvD,OAAO,IAAIC,MAAM,GAAGhB,UAAU,CAAC,QAAD,EAAW,UAASnC,CAAT,EAAYoD,CAAZ,EAAe;EAAE,OAAOpD,CAAC,CAACqD,KAAF,CAAQD,CAAR,CAAP;AAAoB,CAAhD,CAAvB;AACP,OAAO,IAAIE,MAAM,GAAGzD,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKgD,GAAG,CAACU,OAAT,CAAT,EAA4B;EAAEC,OAAO,EAAE,CAAX;EAAcH,KAAK,EAAE,UAASI,EAAT,EAAa;IAAE,OAAQ,KAAKA,EAAL,EAAU,IAAIC,UAAJ,CAAe,EAAf,CAAlB;EAAwC,CAA5E;EAA8EC,OAAO,EAAE,UAASC,EAAT,EAAa;IAAE,OAAQ,KAAKA,EAAL,EAAU,IAAlB;EAA0B,CAAhI;EAAkIC,OAAO,EAAE;AAA3I,CAA5B,CAArB;AACP,OAAO,IAAIC,MAAM,GAAGjE,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKgD,GAAG,CAACkB,OAAT,CAAT,EAA4B;EAAEP,OAAO,EAAE,CAAX;EAAcH,KAAK,EAAE,UAASI,EAAT,EAAa;IAAE,OAAO,IAAIC,UAAJ,CAAe,CAACD,EAAE,GAAG,CAAH,GAAO,CAAV,CAAf,CAAP;EAAsC,CAA1E;EAA4EE,OAAO,EAAE,UAASC,EAAT,EAAa;IAAE,OAAOA,EAAE,CAAC,CAAD,CAAF,IAAS,CAAhB;EAAoB,CAAxH;EAA0HC,OAAO,EAAE;AAAnI,CAA5B,CAArB;AACP,OAAO,IAAIG,MAAM,GAAGnE,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKgD,GAAG,CAACoB,OAAJ,CAAYjB,QAAZ,CAAL,CAAT,EAAsC;EAChEQ,OAAO,EAAE,CADuD;EAEhEH,KAAK,EAAE,UAASI,EAAT,EAAa;IAClB,IAAI;MACF,OAAOb,MAAM,CAACsB,KAAP,CAAaC,OAAb,CAAqBvB,MAAM,CAACsB,KAAP,CAAaE,QAAb,CAAsBX,EAAtB,CAArB,EAAgD,CAAhD,CAAP;IACD,CAFD,CAEE,OAAOvC,CAAP,EAAU;MACV,MAAM,IAAImD,KAAJ,CAAU,UAAUtC,MAAV,CAAiB0B,EAAjB,EAAqB,uBAArB,EAA8C1B,MAA9C,CAAqDiB,QAArD,EAA+D,GAA/D,CAAV,CAAN;IACD;EACF,CAR+D;EAShEW,OAAO,EAAE,UAASC,EAAT,EAAa;IACpB;IACA;IACA,OAAOhB,MAAM,CAACE,SAAP,CAAiBpB,IAAjB,CAAsBkC,EAAE,CAAC9B,KAAH,CAAS,CAAT,EAAY,CAAZ,CAAtB,CAAP;EACD,CAb+D;EAchE+B,OAAO,EAAE;AAduD,CAAtC,CAArB;AAgBP,OAAO,IAAIS,SAAS,GAAGzE,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKgD,GAAG,CAACoB,OAAJ,CAAY3B,WAAZ,CAAL,CAAT,EAAyC;EACtEkB,OAAO,EAAE,EAD6D;EAEtEH,KAAK,EAAE,UAASI,EAAT,EAAa;IAClB,IAAI;MACF,OAAOb,MAAM,CAACsB,KAAP,CAAaC,OAAb,CAAqBvB,MAAM,CAACsB,KAAP,CAAaE,QAAb,CAAsBX,EAAtB,CAArB,EAAgD,EAAhD,CAAP;IACD,CAFD,CAEE,OAAOvC,CAAP,EAAU;MACV,MAAM,IAAImD,KAAJ,CAAU,UAAUtC,MAAV,CAAiB0B,EAAjB,EAAqB,uBAArB,EAA8C1B,MAA9C,CAAqDO,WAArD,EAAkE,GAAlE,CAAV,CAAN;IACD;EACF,CARqE;EAStEqB,OAAO,EAAE,UAASC,EAAT,EAAa;IACpB;IACA;IACA,OAAOhB,MAAM,CAACE,SAAP,CAAiBpB,IAAjB,CAAsBkC,EAAE,CAAC9B,KAAH,CAAS,CAAT,EAAY,EAAZ,CAAtB,CAAP;EACD,CAbqE;EActE+B,OAAO,EAAE;AAd6D,CAAzC,CAAxB;AAgBP;;AACA,IAAIU,UAAU,GAAG,UAASC,GAAT,EAAc;EAC7B,OAAQ;IACNnB,KAAK,EAAE,UAASI,EAAT,EAAa;MAAE,OAAQb,MAAM,CAACsB,KAAP,CAAaO,WAAb,CAAyBhB,EAAzB,CAAR;IAAwC,CADxD;IAENE,OAAO,EAAE,UAASC,EAAT,EAAa;MAAE,OAAQhB,MAAM,CAACsB,KAAP,CAAaQ,YAAb,CAA0Bd,EAAE,CAAC9B,KAAH,CAAS,CAAT,EAAY0C,GAAZ,CAA1B,CAAR;IAAuD;EAFzE,CAAR;AAID,CALD;AAMA;;;AACA,OAAO,IAAIG,cAAc,GAAG,UAASH,GAAT,EAAc;EACxC,OAAQ;IACNhB,OAAO,EAAEgB,GADH;IAENX,OAAO,EAAE,QAAQ9B,MAAR,CAAeyC,GAAf,EAAoB,GAApB,CAFH;IAGNnB,KAAK,EAAE,UAASI,EAAT,EAAa;MAClB,OAAOb,MAAM,CAACsB,KAAP,CAAaE,QAAb,CAAsBX,EAAtB,CAAP;IACD,CALK;IAMNE,OAAO,EAAE,UAASC,EAAT,EAAa;MACpB,OAAOhB,MAAM,CAACsB,KAAP,CAAaU,OAAb,CAAqBhB,EAAE,CAAC9B,KAAH,CAAS,CAAT,EAAY0C,GAAZ,CAArB,CAAP;IACD;EARK,CAAR;AAUD,CAXM;AAYP,OAAO,IAAIK,OAAO,GAAG,UAASL,GAAT,EAAc;EAAE,OAAQ3E,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKgD,GAAG,CAACiC,QAAJ,CAAaN,GAAb,CAAL,CAAT,EAAkCD,UAAU,CAACC,GAAD,CAA5C,CAAT,EAA6D;IAAEhB,OAAO,EAAEjB,iBAAiB,CAACiC,GAAD,CAA5B;IAAmCX,OAAO,EAAE,QAAQ9B,MAAR,CAAeyC,GAAf,EAAoB,GAApB;EAA5C,CAA7D,CAAhB;AAAwJ,CAAtL;AACP,OAAO,IAAIO,QAAQ,GAAGlF,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKgD,GAAG,CAACmC,SAAT,CAAT,EAA8BL,cAAc,CAAC,EAAD,CAA5C,CAAT,EAA4D;EAAEd,OAAO,EAAE;AAAX,CAA5D,CAAvB;AACP,OAAO,IAAIoB,YAAY,GAAG,UAASC,CAAT,EAAY;EACpC,OAAO,OAAOnC,MAAM,CAACrB,IAAP,CAAYgB,OAAO,CAACyC,aAAR,CAAsBD,CAAtB,EAAyBE,SAArC,EAAgDC,QAAhD,CAAyD,KAAzD,CAAd;AACD,CAFM;AAGP,OAAO,IAAIC,cAAc,GAAG,UAASC,OAAT,EAAkB;EAC5C,OAAO7C,OAAO,CAAC8C,aAAR,CAAsBzC,MAAM,CAACrB,IAAP,CAAY6D,OAAO,CAACzD,KAAR,CAAc,CAAd,CAAZ,EAA8B,KAA9B,CAAtB,CAAP;AACD,CAFM;;AAGP,IAAI2D,YAAY,GAAG,UAASP,CAAT,EAAY;EAC7B,IAAIQ,IAAI,GAAIR,CAAC,IAAIA,CAAC,CAACS,cAAP,IAAyBT,CAAC,CAACS,cAAF,CAAiBD,IAA3C,IACRR,CAAC,IAAIA,CAAC,CAACQ,IADC,IAER,OAAOR,CAAP,KAAa,QAAb,IAAyBA,CAF5B,CAD6B,CAI7B;;EACA,OAAOQ,IAAP;AACD,CAND;;AAOA,OAAO,IAAIE,WAAW,GAAG,UAASV,CAAT,EAAY;EACnC,IAAIW,CAAC,GAAGJ,YAAY,CAACP,CAAD,CAApB,CADmC,CAEnC;;EACA,IAAIW,CAAC,KAAK,KAAV,EAAiB;IACf,MAAMxB,KAAK,CAAC,yBAAyBtC,MAAzB,CAAgCmD,CAAhC,CAAD,CAAX;EACD;;EACD,OAAOW,CAAP;AACD,CAPM;;AASP,SAASC,gBAAT,CAA0BZ,CAA1B,EAA6B;EAC3B,IAAIQ,IAAI,GAAGD,YAAY,CAACP,CAAD,CAAvB;EACA,OAAO,CAACQ,IAAD,GAAQR,CAAR,GACLQ,IAAI,CAAC5D,KAAL,CAAW,CAAX,EAAc,CAAd,MAAqB,IAArB,GAA4B4D,IAA5B,GACAT,YAAY,CAACS,IAAD,CAFd;AAGD;;AAAA;AACD,OAAO,IAAIK,SAAS,GAAGlG,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKgD,GAAG,CAACmD,UAAT,CAAT,EAA+BrB,cAAc,CAAC,EAAD,CAA7C,CAAT,EAA6D;EAC1FnB,OAAO,EAAE,EADiF;EAE1FyC,YAAY,EAAE,UAASC,EAAT,EAAa;IACzB,IAAIC,GAAG,GAAGL,gBAAgB,CAACI,EAAD,CAA1B;IACA,IAAIE,EAAE,GAAGvD,GAAG,CAACmD,UAAJ,CAAeC,YAAf,CAA4BE,GAAG,IAAID,EAAnC,CAAT,CAFyB,CAGzB;;IACA,OAAOE,EAAE,CAACC,MAAH,CAAU,KAAK,CAAL,GAAS,CAAnB,EAAsB,GAAtB,CAAP;EACD,CAPyF;EAQ1FxC,OAAO,EAAE;AARiF,CAA7D,CAAxB;AAUP,OAAO,IAAIyC,UAAU,GAAGzG,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKmE,MAAL,CAAT,EAAuB;EAAEuC,IAAI,EAAE;AAAR,CAAvB,CAAzB;AACP,OAAO,IAAIC,OAAO,GAAG,UAASC,EAAT,EAAaC,MAAb,EAAqB;EACxC,IAAIC,IAAI,GAAGpE,iBAAiB,CAACC,YAAY,CAACkE,MAAD,CAAb,CAA5B;EACAzE,KAAK,CAAC,SAAD,EAAYwE,EAAZ,EAAgBE,IAAhB,CAAL;EACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,IAAIhF,KAAJ,CAAU8E,IAAV,EAAgBG,IAAhB,CAAqBL,EAArB,CAAD,CAArB;EACAxE,KAAK,CAAC,SAAD,EAAY2E,OAAZ,CAAL;EACA,IAAIpD,OAAO,GAAGoD,OAAO,CAACpD,OAAtB;EAAA,IACEH,KAAK,GAAGuD,OAAO,CAACvD,KADlB;EAAA,IAEEM,OAAO,GAAGiD,OAAO,CAACjD,OAFpB;EAGA,OAAO9D,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKgD,GAAG,CAACkE,QAAJ,CAAaN,EAAb,EAAiBE,IAAjB,CAAL,CAAT,EAAuC;IAAEnD,OAAO,EAAEA,OAAX;IAAoBH,KAAK,EAAEA,KAA3B;IAAkCM,OAAO,EAAEA,OAA3C;IAAoDE,OAAO,EAAE,GAAG9B,MAAH,CAAU0E,EAAE,CAAC5C,OAAb,EAAsB,GAAtB,EAA2B9B,MAA3B,CAAkC4E,IAAlC,EAAwC,GAAxC;EAA7D,CAAvC,CAAf;AACD,CATM;AAUP,OAAO,IAAIE,OAAO,GAAG,UAASG,GAAT,EAAc;EACjC,OAAQnH,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKgD,GAAG,CAACoE,QAAJ,CAAaD,GAAb,CAAL,CAAT,EAAkC;IAChDxD,OAAO,EAAGwD,GAAG,CAACE,MAAJ,CAAY,UAASC,GAAT,EAAcV,EAAd,EAAkB;MACtC,OAAOU,GAAG,GAAGV,EAAE,CAACjD,OAAhB;IACD,CAFS,EAEN,CAFM,CADsC;IAIhDH,KAAK,EAAE,UAASI,EAAT,EAAa;MAClB,IAAI0C,GAAG,GAAGa,GAAG,CAACI,GAAJ,CAAQ,UAASX,EAAT,EAAavG,CAAb,EAAgB;QAAE,OAAOuG,EAAE,CAACpD,KAAH,CAASI,EAAE,CAACvD,CAAD,CAAX,CAAP;MAAyB,CAAnD,CAAV;MACA,OAAO0C,MAAM,CAACsB,KAAP,CAAanC,MAAb,CAAoBoE,GAApB,CAAP;IACD,CAP+C;IAQhD;IACAxC,OAAO,EAAE,UAASC,EAAT,EAAa;MACpB;MACA,IAAIyD,MAAM,GAAG,IAAIxF,KAAJ,CAAUmF,GAAG,CAAC3G,MAAd,EAAsByG,IAAtB,CAA2B,IAA3B,CAAb;MACA,IAAIQ,IAAI,GAAG1D,EAAX;;MACA,KAAK,IAAI1D,CAAT,IAAc8G,GAAd,EAAmB;QACjB,IAAIP,EAAE,GAAGO,GAAG,CAAC9G,CAAD,CAAZ;QACAmH,MAAM,CAACnH,CAAD,CAAN,GAAYuG,EAAE,CAAC9C,OAAH,CAAW2D,IAAI,CAACxF,KAAL,CAAW,CAAX,EAAc2E,EAAE,CAACjD,OAAjB,CAAX,CAAZ;QACA8D,IAAI,GAAGA,IAAI,CAACxF,KAAL,CAAW2E,EAAE,CAACjD,OAAd,CAAP;MACD;;MACD,OAAO6D,MAAP;IACD,CAnB+C;IAoBhDxD,OAAO,EAAE,IAAI9B,MAAJ,CAAWiF,GAAG,CAACI,GAAJ,CAAQ,UAASG,CAAT,EAAY;MAAE,OAAOA,CAAC,CAAC1D,OAAT;IAAmB,CAAzC,EAA2C2D,IAA3C,CAAgD,GAAhD,CAAX,EAAiE,GAAjE;EApBuC,CAAlC,CAAhB;AAsBD,CAvBM;AAwBP,OAAO,IAAIC,QAAQ,GAAG,UAAST,GAAT,EAAc;EAClC,OAAQnH,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKgD,GAAG,CAAC6E,SAAJ,CAAcV,GAAd,CAAL,CAAT,EAAmC;IACjDxD,OAAO,EAAGwD,GAAG,CAACE,MAAJ,CAAW,UAASC,GAAT,EAAcV,EAAd,EAAkB;MAAE,OAAOU,GAAG,GAAGV,EAAE,CAAC,CAAD,CAAF,CAAMjD,OAAnB;IAA6B,CAA5D,EAA8D,CAA9D,CADuC;IAEjDH,KAAK,EAAE,UAASI,EAAT,EAAa;MAClB,IAAI0C,GAAG,GAAGa,GAAG,CAACI,GAAJ,CAAQ,UAASO,EAAT,EAAa;QAC7B,IAAIC,EAAE,GAAGjH,MAAM,CAACgH,EAAD,EAAK,CAAL,CAAf;QAAA,IACEE,CAAC,GAAGD,EAAE,CAAC,CAAD,CADR;QAAA,IAEEnB,EAAE,GAAGmB,EAAE,CAAC,CAAD,CAFT;;QAGA,OAAOnB,EAAE,CAACpD,KAAH,CAASI,EAAE,CAACoE,CAAD,CAAX,CAAP;MACD,CALS,CAAV;MAMA,OAAOjF,MAAM,CAACsB,KAAP,CAAanC,MAAb,CAAoBoE,GAApB,CAAP;IACD,CAVgD;IAWjD;IACAxC,OAAO,EAAE,UAASC,EAAT,EAAa;MACpB,IAAIkE,GAAG,GAAG,EAAV;MACA,IAAIR,IAAI,GAAG1D,EAAX;;MACA,KAAK,IAAI1D,CAAT,IAAc8G,GAAd,EAAmB;QACjB,IAAIW,EAAE,GAAGhH,MAAM,CAACqG,GAAG,CAAC9G,CAAD,CAAJ,EAAS,CAAT,CAAf;QAAA,IACE2H,CAAC,GAAGF,EAAE,CAAC,CAAD,CADR;QAAA,IAEElB,EAAE,GAAGkB,EAAE,CAAC,CAAD,CAFT;;QAGAG,GAAG,CAACD,CAAD,CAAH,GAASpB,EAAE,CAAC9C,OAAH,CAAW2D,IAAI,CAACxF,KAAL,CAAW,CAAX,EAAc2E,EAAE,CAACjD,OAAjB,CAAX,CAAT;QACA8D,IAAI,GAAGA,IAAI,CAACxF,KAAL,CAAW2E,EAAE,CAACjD,OAAd,CAAP;MACD;;MACD,OAAOsE,GAAP;IACD,CAvBgD;IAwBjDjE,OAAO,EAAE,IAAI9B,MAAJ,CAAWiF,GAAG,CAACI,GAAJ,CAAQ,UAASG,CAAT,EAAY;MAAE,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK1D,OAAZ;IAAsB,CAA5C,EAA8C2D,IAA9C,CAAmD,GAAnD,CAAX,EAAoE,GAApE;EAxBwC,CAAnC,CAAhB;AA0BD,CA3BM;AA4BP,OAAO,IAAIO,QAAQ,GAAG,UAASC,KAAT,EAAgB;EACpC,IAAIhB,GAAG,GAAGlH,MAAM,CAACmI,MAAP,CAAcD,KAAd,CAAV;EACA,IAAIxE,OAAO,GAAGwD,GAAG,CAACE,MAAJ,CAAW,UAASC,GAAT,EAAcV,EAAd,EAAkB;IAAE,OAAOU,GAAG,GAAGV,EAAE,CAACjD,OAAhB;EAA0B,CAAzD,EAA2D,CAA3D,CAAd;EACA,IAAI0E,SAAS,GAAGhG,SAAS,CAAC8F,KAAD,CAAT,CAAiBE,SAAjC;EACA,OAAOrI,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKgD,GAAG,CAACsF,SAAJ,CAAcH,KAAd,CAAL,CAAT,EAAqC;IAClDxE,OAAO,EAAEA,OADyC;IAElDH,KAAK,EAAE,UAASI,EAAT,EAAa;MAClB,IAAI4D,MAAM,GAAGa,SAAS,CAACd,GAAV,CAAc,UAASgB,KAAT,EAAgB;QACzC,OAAOJ,KAAK,CAACI,KAAD,CAAL,CAAa/E,KAAb,CAAmBI,EAAE,CAAC2E,KAAD,CAArB,CAAP;MACD,CAFY,CAAb;MAGA,OAAOxF,MAAM,CAACsB,KAAP,CAAanC,MAAb,CAAoBsF,MAApB,CAAP;IACD,CAPiD;IAQlD;IACA1D,OAAO,EAAE,UAASC,EAAT,EAAa;MACpB,IAAIkE,GAAG,GAAG,EAAV;MACA,IAAIR,IAAI,GAAG1D,EAAX;;MACA,KAAK,IAAIyE,IAAT,IAAiBH,SAAjB,EAA4B;QAC1B,IAAIhI,CAAC,GAAGoI,QAAQ,CAACD,IAAD,CAAhB;QACA,IAAID,KAAK,GAAGF,SAAS,CAAChI,CAAD,CAArB;QACA,IAAIuG,EAAE,GAAGuB,KAAK,CAACI,KAAD,CAAd;QACAN,GAAG,CAACM,KAAD,CAAH,GAAa3B,EAAE,CAAC9C,OAAH,CAAW2D,IAAI,CAACxF,KAAL,CAAW,CAAX,EAAc2E,EAAE,CAACjD,OAAjB,CAAX,CAAb;QACA8D,IAAI,GAAGA,IAAI,CAACxF,KAAL,CAAW2E,EAAE,CAACjD,OAAd,CAAP;MACD;;MACD,OAAOsE,GAAP;IACD,CApBiD;IAqBlDjE,OAAO,EAAE,IAAI9B,MAAJ,CAAWiF,GAAG,CAACI,GAAJ,CAAQ,UAASG,CAAT,EAAY;MAAE,OAAOA,CAAC,CAAC1D,OAAT;IAAmB,CAAzC,EAA2C2D,IAA3C,CAAgD,GAAhD,CAAX,EAAiE,GAAjE;EArByC,CAArC,CAAf;AAuBD,CA3BM,C,CA4BP;AACA;AACA;;AACA,OAAO,IAAIe,MAAM,GAAG,UAASP,KAAT,EAAgB;EAClC,IAAIhB,GAAG,GAAGlH,MAAM,CAACmI,MAAP,CAAcD,KAAd,CAAV;EACA,IAAIQ,QAAQ,GAAGxB,GAAG,CAACI,GAAJ,CAAQ,UAASX,EAAT,EAAa;IAAE,OAAOA,EAAE,CAACjD,OAAV;EAAoB,CAA3C,CAAf;EACA,IAAIiF,OAAO,GAAGC,IAAI,CAACC,GAAL,CAASjI,KAAT,CAAegI,IAAf,EAAqBlH,aAAa,CAAC,EAAD,EAAKb,MAAM,CAAC6H,QAAD,CAAX,EAAuB,KAAvB,CAAlC,CAAd;EACA,IAAIhF,OAAO,GAAGiF,OAAO,GAAG,CAAxB;EACAxG,KAAK,CAAC,QAAD,EAAW;IAAE+E,GAAG,EAAEA,GAAP;IAAYwB,QAAQ,EAAEA,QAAtB;IAAgCC,OAAO,EAAEA,OAAzC;IAAkDjF,OAAO,EAAEA;EAA3D,CAAX,CAAL;;EACA,IAAImE,EAAE,GAAGzF,SAAS,CAAC8F,KAAD,CAAlB;EAAA,IACEE,SAAS,GAAGP,EAAE,CAACO,SADjB;EAAA,IAEEU,QAAQ,GAAGjB,EAAE,CAACiB,QAFhB;;EAGA,OAAO/I,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKgD,GAAG,CAACgG,OAAJ,CAAYb,KAAZ,CAAL,CAAT,EAAmC;IAChDxE,OAAO,EAAEA,OADuC;IAEhDH,KAAK,EAAE,UAASsE,EAAT,EAAa;MAClB,IAAIC,EAAE,GAAGjH,MAAM,CAACgH,EAAD,EAAK,CAAL,CAAf;MAAA,IACES,KAAK,GAAGR,EAAE,CAAC,CAAD,CADZ;MAAA,IAEEzB,GAAG,GAAGyB,EAAE,CAAC,CAAD,CAFV;;MAGA,IAAI1H,CAAC,GAAG0I,QAAQ,CAACR,KAAD,CAAhB;MACA,IAAIU,MAAM,GAAG,IAAIpF,UAAJ,CAAe,CAACxD,CAAD,CAAf,CAAb;MACA,IAAI6I,MAAM,GAAGf,KAAK,CAACI,KAAD,CAAlB;MACA,IAAIY,MAAM,GAAGD,MAAM,CAAC1F,KAAP,CAAa8C,GAAb,CAAb;MACA,IAAI8C,OAAO,GAAG,IAAIvF,UAAJ,CAAe+E,OAAO,GAAGO,MAAM,CAAC3I,MAAhC,CAAd;MACA,OAAOuC,MAAM,CAACsB,KAAP,CAAanC,MAAb,CAAoB,CAAC+G,MAAD,EAASE,MAAT,EAAiBC,OAAjB,CAApB,CAAP;IACD,CAZ+C;IAahDtF,OAAO,EAAE,UAASC,EAAT,EAAa;MACpB,IAAI1D,CAAC,GAAG0D,EAAE,CAAC,CAAD,CAAV;MACA,IAAIwE,KAAK,GAAGF,SAAS,CAAChI,CAAD,CAArB;MACA,IAAI6I,MAAM,GAAGf,KAAK,CAACI,KAAD,CAAlB;MACAnG,KAAK,CAAC;QAAE2B,EAAE,EAAEA,EAAN;QAAU1D,CAAC,EAAEA,CAAb;QAAgBkI,KAAK,EAAEA,KAAvB;QAA8BW,MAAM,EAAEA;MAAtC,CAAD,CAAL;MACA,IAAIzB,IAAI,GAAG1D,EAAE,CAAC9B,KAAH,CAAS,CAAT,CAAX;MACA,IAAIoH,OAAO,GAAGH,MAAM,CAACvF,OAArB;MACA,IAAI2C,GAAG,GAAG4C,MAAM,CAACpF,OAAP,CAAe2D,IAAI,CAACxF,KAAL,CAAW,CAAX,EAAcoH,OAAd,CAAf,CAAV;MACA,OAAO,CAACd,KAAD,EAAQjC,GAAR,CAAP;IACD,CAtB+C;IAuBhDtC,OAAO,EAAE,cAAc9B,MAAd,CAAqB0G,OAArB,EAA8B,IAA9B;EAvBuC,CAAnC,CAAf;AAyBD,CAlCM;AAmCP,OAAO,IAAIU,SAAS,GAAG/G,WAAW,CAAC2D,SAAD,CAA3B;AACP,OAAO,IAAIqD,QAAQ,GAAGpH,cAAc,CAACqH,OAA9B;AACP,OAAO,IAAIC,UAAU,GAAGtH,cAAc,CAACsH,UAAhC;AACP,OAAO,IAAIC,SAAS,GAAGvH,cAAc,CAACuH,SAA/B;AACP,OAAO,IAAIC,SAAS,GAAGxH,cAAc,CAACwH,SAA/B;AACP,IAAIC,OAAO,GAAGzF,MAAd;AACA,OAAO,IAAI0F,SAAS,GAAG,UAASxE,CAAT,EAAYyE,CAAZ,EAAe;EACpC1H,KAAK,CAAC,WAAD,EAAc;IAAEiD,CAAC,EAAEA,CAAL;IAAQyE,CAAC,EAAEA;EAAX,CAAd,CAAL;EACA,IAAIC,KAAK,GAAGtD,UAAU,CAACL,YAAX,CAAwBf,CAAxB,CAAZ;EACA,IAAI2E,MAAM,GAAG9D,SAAS,CAACE,YAAV,CAAuB0D,CAAvB,CAAb;EACA,IAAIG,MAAM,GAAGpH,OAAO,CAACqH,qBAAR,CAA8BtH,iBAAiB,CAACmH,KAAD,CAA/C,CAAb;EACA3H,KAAK,CAAC,WAAD,EAAc;IAAE6H,MAAM,EAAEA,MAAV;IAAkBD,MAAM,EAAEA;EAA1B,CAAd,CAAL;EACA,OAAOV,SAAS,CAACW,MAAD,EAASD,MAAT,CAAhB;AACD,CAPM;AAQP,OAAO,IAAIG,OAAO,GAAG,UAAS9E,CAAT,EAAYyE,CAAZ,EAAe;EAClC,OAAOF,OAAO,CAACxD,YAAR,CAAqBf,CAArB,EAAwB+E,EAAxB,CAA2BR,OAAO,CAACxD,YAAR,CAAqB0D,CAArB,CAA3B,CAAP;AACD,CAFM;AAGP,OAAO,IAAIO,QAAQ,GAAG;EACpB5G,MAAM,EAAEA,MADY;EAEpBQ,MAAM,EAAEA,MAFY;EAGpBE,MAAM,EAAEA,MAHY;EAIpBM,SAAS,EAAEA,SAJS;EAKpBO,OAAO,EAAEA,OALW;EAMpBkB,SAAS,EAAEA,SANS;EAOpBO,UAAU,EAAEA,UAPQ;EAQpBvB,QAAQ,EAAEA,QARU;EASpB0E,OAAO,EAAEA,OATW;EAUpB1B,QAAQ,EAAEA,QAVU;EAWpBQ,MAAM,EAAEA,MAXY;EAYpB/B,OAAO,EAAEA,OAZW;EAapBK,OAAO,EAAEA,OAbW;EAcpBY,QAAQ,EAAEA;AAdU,CAAf;AAgBP,OAAO,IAAI0C,iBAAiB,GAAG,CAAxB;AACP,IAAIC,KAAK,GAAG/H,SAAS,CAACW,QAAD,CAArB;AACA,OAAO,IAAIqH,MAAM,GAAGxK,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKmC,cAAL,CAAT,EAA+BoI,KAA/B,CAAT,EAAgDF,QAAhD,CAAT,EAAoE;EAAEf,SAAS,EAAEA,SAAb;EAAwBO,SAAS,EAAEA,SAAnC;EAA8CN,QAAQ,EAAEA,QAAxD;EAAkEY,OAAO,EAAEA,OAA3E;EAAoF7G,MAAM,EAAEA,MAA5F;EAAoGH,QAAQ,EAAEA,QAA9G;EAAwHmH,iBAAiB,EAAEA;AAA3I,CAApE,CAArB"},"metadata":{},"sourceType":"module"}